<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>K07JSPServlet</display-name>
  <!-- 배포서술자(Deployment descriptor) : 해당 웹 어플리케이션을
  			개발하거나 배포할때 여러가지 설정값을 저장하는 용도로 사용되는
  			xml파일
  -->
  <!-- 
  	컨텍스트 초기화 파라미터
  		: 해당 웹어플리케이션 전체에서 접근가능한 영역으로
  		주로  application 내장객체를 통해 접근하여 값을
  		얻어오게된다. 일종의 상수와 같은 역할을 하게된다.  
  -->
  <context-param>
  	<param-name>JDBCDriver</param-name>
  	<param-value>oracle.jdbc.OracleDriver</param-value>
  </context-param>
  <context-param>
  	<param-name>ConnectionURL</param-name>
  	<param-value>jdbc:oracle:thin:@localhost:1521:orcl</param-value>
  </context-param>
  
  <!-- 차후 게시판에서 사용할 페이지 번호의 설정값 -->
  <context-param><!-- 한 페이지에 출력할 게시물의 갯수 -->
  	<param-name>PAGE_SIZE</param-name>
  	<param-value>10</param-value>
  </context-param>
  <context-param><!-- 한 블럭당 출력할 페이지번호의 갯수 -->
  	<param-name>BLOCK_PAGE</param-name>
  	<param-value>10</param-value>
  </context-param>
  
  
  <!-- 세션 유지시간 설정하기 : web.xml에서는 '분'단위로 설정된다. -->
  <session-config>
  	<session-timeout>60</session-timeout>
  </session-config>
  
  <!-- tld파일의 위치(경로) 등록 -->
  <!--  
	EL에서 Java클래스의 메소드 호출 절차 및 방법
	1.클래스와 메소드를 정의한다. 단 메소드 정의시 반드시
		public static으로 선언해야한다. 
	2.TLD파일을 생성한다. Tag Library Descriptor의 약자로
		WEB-INF폴더 하위에 생성한다. 웹어플리케이션 실행시 
		컨테이너가 해당 파일을 찾아 사용하게된다. 우리는 tlds폴더를
		생성한후 파일을 생성하고, fn.tld파일을 참조하여 작성하였다.
	3.생성한 TLD파일의 경로를 등록한다. 등록시 <jsp-config>
		엘리먼트를 통해 기술한다. 
  -->
  <jsp-config>
  	<taglib>
  		<taglib-uri>myTagLibTld</taglib-uri>
  		<taglib-location>/WEB-INF/tlds/MyTagLib.tld</taglib-location>
  	</taglib>
  </jsp-config>
  
<!-- JSP파일에서 내용을 출력하기 위해 request영역을 이용하고,
  	포워드를 통해 영역을 공유한다. -->
  <servlet>
  <servlet-name>HelloServlet</servlet-name>
  <servlet-class>servlet.HelloServlet</servlet-class>
  <!-- 해당 서블릿 내에서만 사용할수 있는 파라미터 -->
  <init-param>
  <param-name>HELLO</param-name>
  <param-value>Hi~~</param-value>
  </init-param>
  </servlet>
  <servlet-mapping>
  <servlet-name>HelloServlet</servlet-name>
  <url-pattern>/13Servlet/HelloServlet.do</url-pattern>
  </servlet-mapping>
  
  
  <servlet>
  <!-- 3. 아래 2번에서 지정한 이름과 동일하게 지정한다.   -->
  <servlet-name>NoJSPServlet</servlet-name>
  <servlet-class>servlet.NoJSPServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  <!-- 2. 해당 요청이 들어왔을때 호출할 서블릿의 이름을 지정한다. -->
  <servlet-name>NoJSPServlet</servlet-name>
  <!-- 1. 결정한 요청명을 기술한다. 
  이때 컨텍스트 루트를 제외한 /로 시작하는 경로를 입력해야한다. -->
  <url-pattern>/13Servlet/NoJSPServlet.do</url-pattern>
  </servlet-mapping>
  
  <!-- 예제3 : 어노테이션을 통한 매핑이므로 매핑 엘리먼트 없음. -->
  
  <!-- 예제4 : 간단한 사칙연산 계산기 구현하기 ////패키지.서블릿클래스명 ...-->
  <servlet>
  	<servlet-name>Calculate</servlet-name>
  	<servlet-class>servlet.CalculateServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>Calculate</servlet-name>
  	<url-pattern>/Servlet/Calculate.kosmo</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>SimpleMVC</servlet-name>
  	<servlet-class>servlet.SimpleMVC</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>SimpleMVC</servlet-name>
  	<url-pattern>/SimpleMVC</url-pattern>
  </servlet-mapping>
  
  <!-- Model2방식의 서블릿 게시판 제작(자료실) -->
  <!-- 자료실 리스트 매핑 -->
    <servlet>
  	<servlet-name>DataRoomList</servlet-name>
  	<servlet-class>controller.ListCtrl</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>DataRoomList</servlet-name>
  	<url-pattern>/DataRoom/DataList</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>DataRoomWrite</servlet-name>
  	<servlet-class>controller.WriteCtrl</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>DataRoomWrite</servlet-name>
  	<url-pattern>/DataRoom/DataWrite</url-pattern>
  </servlet-mapping>
  <!-- 상세보기 -->
    <servlet>
  	<servlet-name>DataRoomView</servlet-name>
  	<servlet-class>controller.ViewCtrl</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>DataRoomView</servlet-name>
  	<url-pattern>/DataRoom/DataView</url-pattern>
  </servlet-mapping>
  
  <!-- 패스워드검증 -->
  
  <servlet>
  	<servlet-name>DataRoomPassword</servlet-name>
  	<servlet-class>controller.PasswordCtrl</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>DataRoomPassword</servlet-name>
  	<url-pattern>/DataRoom/DataPassword</url-pattern>
  </servlet-mapping>
  
    <!-- 게시물 삭제 -->
  
  <servlet>
  	<servlet-name>DataRoomDelete</servlet-name>
  	<servlet-class>controller.DeleteCtrl</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>DataRoomDelete</servlet-name>
  	<url-pattern>/DataRoom/DataDelete</url-pattern>
  </servlet-mapping>
 
  <!-- 게시물 수정 -->
  
  <servlet>
  	<servlet-name>DataRoomEdit</servlet-name>
  	<servlet-class>controller.EditCtrl</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>DataRoomEdit</servlet-name>
  	<url-pattern>/DataRoom/DataEdit</url-pattern>
  </servlet-mapping>
  <!-- 게시물 다운로드 -->
  
  <servlet>
  	<servlet-name>DataRoomDownload</servlet-name>
  	<servlet-class>controller.DownloadCtrl</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>DataRoomDownload</servlet-name>
  	<url-pattern>/DataRoom/Download</url-pattern>
  </servlet-mapping>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app>